//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Serialize, Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "players")]
pub struct Model {
    /// Unique Identifier for the player
    #[sea_orm(primary_key)]
    pub id: u32,
    /// Email address of the player
    pub email: String,
    /// Display name / Username of the player
    pub display_name: String,
    /// Sesssion token. Omitted from serialization
    #[serde(skip)]
    pub session_token: Option<String>,
    /// Flag for whether the account is created from origin
    pub origin: bool,
    /// Hashed password which is omitted from serialization
    #[serde(skip)]
    pub password: String,
    /// Total number of credits the account has to spend
    pub credits: u32,
    /// Total number of credits the account has spent
    pub credits_spent: u32,
    /// The total number of games played by the player
    pub games_played: u32,
    /// The total number of seconds played.
    pub seconds_played: u32,
    /// The encoded inventory list
    pub inventory: String,
    /// The currently selected reward banner ID
    pub csreward: u16,
    pub face_codes: Option<String>,
    pub new_item: Option<String>,
    /// Challenge completion string starts with 22, then the
    /// next field is the number of challenge points obtained
    pub completion: Option<String>,
    /// Progress for each challenge
    pub progress: Option<String>,
    pub cs_completion: Option<String>,
    /// List of timestamps for the completion time of each challenge
    pub cs_timestamps1: Option<String>,
    /// List of timestamps for the completion time of each challenge
    pub cs_timestamps2: Option<String>,
    /// List of timestamps for the completion time of each challenge
    pub cs_timestamps3: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::player_classes::Entity")]
    Classes,
    #[sea_orm(has_many = "super::player_characters::Entity")]
    Characters,
    #[sea_orm(has_one = "super::galaxy_at_war::Entity")]
    GalaxyAtWar,
}

impl Related<super::player_classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Classes.def()
    }
}

impl Related<super::player_characters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Characters.def()
    }
}

impl Related<super::galaxy_at_war::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GalaxyAtWar.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
